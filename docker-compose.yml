services:
  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"       # MongoDB default port
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example  # **Note:** Use strong passwords in production
    volumes:
      - mongo-data:/data/db
    networks:
      - mc_network
    healthcheck:
      test: [
        "CMD",
        "mongosh",
        "--username",
        "root",
        "--password",
        "example",
        "--authenticationDatabase",
        "admin",
        "--eval",
        "db.adminCommand('ping')"
      ]
      interval: 10s
      timeout: 5s
      retries: 5

  consul:
    image: hashicorp/consul:latest
    container_name: consul
    restart: unless-stopped
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0"
    volumes:
      - consul-data:/consul/data
    networks:
      - mc_network
    
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - mc_network

  gateway:
    build:
      context: ./gateway
    container_name: gateway-service
    ports:
      - "8081:8081"
    networks:
      - mc_network
    depends_on:
      - consul

  user_params:
    build:
      context: ./user_parameters
    container_name: userparameters
    ports:
      - "8888:8888"
    networks:
      - mc_network
    depends_on:
      - consul

  codekcal:
    build:
      context: ./codekcal
    container_name: codekcal-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  sorter:
    build:
      context: ./sorter
    container_name: sorter-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  menu_db:
    build:
      context: ./menu_plan_db
    container_name: menudb
    ports:
      - "8066:8066"
    networks:
      - mc_network
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:example@mongo:27017/menu_db?authSource=admin
      SPRING_APPLICATION_NAME: menu_db
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_PORT: 8500
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8066/actuator/health" ]  # Adjust if different
      interval: 30s
      timeout: 10s
      retries: 5

  crawl_controller:
    build:
      context: ./crawl_controller
    container_name: crawlcontroller
    ports:
      - "8086:8086"
    networks:
      - mc_network
    depends_on:
      - consul

  item_db:
    build:
      context: ./item_db
    container_name: itemdb
    ports:
      - "8008:8008"
    networks:
      - mc_network
    depends_on:
      - consul

  bk_code_stripper:
    build:
      context: ./BKCodeStripper
    container_name: bk_code_stripper-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  mcd_crawler:
    build:
      context: ./crawler
    container_name: mc_crawler-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  mcd_code_stripper:
    build:
      context: ./MCCodeStripper
    container_name: mcd_code_stripper-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  dupe_checker:
    build:
      context: ./dupe_checker
    container_name: dupe_checker-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  dupe_remover:
    build:
      context: ./ItemRemover
    container_name: remove_item-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  formatter:
    build:
      context: ./formatter
    container_name: formatter-service
    networks:
      - mc_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  frontend:
    build:
      context: .
    container_name: frontend-docker
    ports:
      - "5173:5173"

networks:
  mc_network:
    driver: bridge
volumes:
  consul-data:
    driver: local
  rabbitmq-data:
    driver: local
  mongo-data:
    driver: local